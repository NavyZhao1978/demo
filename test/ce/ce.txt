

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <memory.h>
#include <iostream>
#include <string>
#include <memory>

using namespace std;

#include "zlib.h"

typedef unsigned char byte;
byte* textFileRead(char* filename, long* size)
{
	byte* text;
	FILE *pf = fopen(filename, "rb");
	fseek(pf, 0, SEEK_END);
	long lSize = ftell(pf);
	*size = lSize;
	// 内存free掉
	text = (byte*)calloc(lSize + 1, sizeof(byte));
	rewind(pf);
	fread(text, sizeof(byte), lSize, pf);
	text[lSize] = '\0';
	return text;
}

int Zip(void *out,unsigned int *outLen ,void * in,unsigned int inLen) {
	int ret = 0;
	z_stream strm;
	uInt allOutLen = *outLen;
	strm.zalloc = Z_NULL;
	strm.zfree = Z_NULL;
	strm.opaque = Z_NULL;
	ret = deflateInit(&strm, -1);//Initializes the internal stream state for compression. 
	if (ret != Z_OK)
		return ret;

	strm.avail_in = inLen;
	strm.next_in = (Bytef*)in;
	do {
		strm.avail_out = *outLen;
		strm.next_out = (Bytef*)out;
		ret = deflate(&strm, Z_FINISH);    /* no bad return value */// Z_FINISH
		assert(ret != Z_STREAM_ERROR);  /* state not clobbered */
		uInt have = allOutLen - strm.avail_out;
		*outLen = have;
	} while (false);
	(void)deflateEnd(&strm);
	return 0;
}

int unZip(void *out, unsigned int *outLen, void * in, unsigned int inLen) {
	int ret = 0;
	z_stream strm;
	uInt allOutLen = *outLen;

	/* allocate inflate state */
	strm.zalloc = Z_NULL;
	strm.zfree = Z_NULL;
	strm.opaque = Z_NULL;
	strm.avail_in = 0;
	strm.next_in = Z_NULL;
	ret = inflateInit(&strm);
	if (ret != Z_OK)
		return ret;

	/* decompress until deflate stream ends or end of file */
	do {
		strm.avail_in = inLen;

		if (strm.avail_in == 0)
			break;
		strm.next_in = (Bytef*)in;

		/* run inflate() on input until output buffer not full */
		do {
			strm.avail_out = *outLen;
			strm.next_out = (Bytef*)out;
			ret = inflate(&strm, Z_SYNC_FLUSH);//Z_FINISH
			assert(ret != Z_STREAM_ERROR);  /* state not clobbered */
			switch (ret) {
			case Z_NEED_DICT:
				ret = Z_DATA_ERROR;     /* and fall through */
			case Z_DATA_ERROR:
			case Z_MEM_ERROR:
				(void)inflateEnd(&strm);
				return ret;
			}
			uInt have = allOutLen - strm.avail_out;
			*outLen = have;
		} while (false);

		/* done when inflate() says it's done */
	} while (ret != Z_STREAM_END);

	/* clean up and return */
	(void)inflateEnd(&strm);
	return ret == Z_STREAM_END ? Z_OK : Z_DATA_ERROR;
}


void getmem(byte ** temp, unsigned int size) {
	*temp = (byte *)calloc(size, sizeof(byte));
}

int main() {
	int err;
	int filenumber = 0;
	long size = 0;
	byte * m = textFileRead("d:\\xxx.dat", &size);
	int filecount = *(int *)m;
	m += sizeof(int);

	byte *uncompr = new byte[size];
	uInt uncomprLen = size;
	if(1)
	{
		byte txt[] = "abcd";
		byte enc[1024] ;
		byte dec[1024] = {0};
		uInt encLen = sizeof(enc);
		uInt decLen = sizeof(dec);
		err = Zip(enc, &encLen, txt, strlen((char*)txt));
		err = unZip(dec,&decLen,enc, encLen);
		dec[decLen] = 0;
		printf("err:%d ,%s\n", err,dec);

	}
	
	
	//err = uncompress(uncompr, &uncomprLen, m, 4);
	for (int i = 1;i <= 1024*10;i++) {
		uncomprLen = 100;
		err = unZip(uncompr, &uncomprLen, m, i);
		if (err == -3) {
			continue;
		}
		printf("i :%d\n", i);
		exit(0);
	}
	err = unZip(uncompr, &uncomprLen, m, 9);
	if (err != Z_OK)
	{
		cerr << "解压错误: " << err << '\n ';
		return 0;
	}

	while (filenumber++ < filecount) {
		byte *temp = 0;
		byte * folder = 0;
		byte * filename = 0;

		//get the filename
		unsigned int size = *(unsigned int *)m;
		m += sizeof(unsigned int);
		getmem(&temp, size + 1);
		memcpy(temp, m, size);
		m += size;
		filename = temp;
		free(temp);
		//get the folder
		size = *(unsigned int *)m;
		m += sizeof(unsigned int);
		getmem(&temp, size + 1);
		memcpy(temp, m, size);
		m += size;
		folder = temp;
		free(temp);
		if (folder != 0) {

		}
		//get file size
		int filesize = *(unsigned int *)m;
		m += sizeof(int);
		FILE *f = fopen((char*)filename, "wb");
		fwrite(m, filesize, 1, f);
		fclose(f);
	}
	return 0;
}

int main11() {
	int err;
	long size = 0;
	byte * m = textFileRead("d:\\xxx.xxx", &size);
	for (int i = 2; i <= size - 1; i++) {
		m[i] ^= m[i - 2];
	}
	for (int i = size - 2; i >= 0; i--) {
		m[i] ^= m[i + 1];
	}
	byte k = 0xce;
	for (int i = 0; i <= size - 1; i++) {
		m[i] ^= k;
		k++;
	}
	byte *p = m;



	if (memcmp(p, "CHEAT", 5) == 0) {
		m += 5;
		uLong comprLen = *(int*)m;
		m += sizeof(int);
		uLong destLen = comprLen * 3;
		std::shared_ptr<byte> out_ptr = std::make_shared<byte>(destLen);
		Bytef * out = (Bytef*)out_ptr.get();

		err = uncompress((Bytef*)out, &destLen, (Bytef*)m, comprLen);
		if (err != Z_OK)
		{
			cerr << "解压错误: " << err << '\n ';
			return 1;
		}
	}
	else {
		uLong comprLen = size;
		uLong destLen = comprLen * 3;
		std::shared_ptr<byte> out_ptr = std::make_shared<byte>(destLen);
		Bytef * out = (Bytef*)out_ptr.get();
		//Z_DATA_ERROR
		err = unZip((Bytef*)out, (uInt*)&destLen, (Bytef*)m, comprLen);
		//err = uncompress((Bytef*)out, &destLen, (Bytef*)m, comprLen);
		if (err != Z_OK)
		{
			cerr << "解压错误: " << err << '\n ';
			return 1;
		}
	}
}

int case002() {
	int err;
	Byte compr[200], uncompr[200]; //足够大
	uLong comprLen = 0, uncomprLen = 0;
	const char* hello = "1234567890"; //原文

	uLong len = strlen(hello);// + 1;
	comprLen = sizeof(compr) / sizeof(compr[0]);

	err = compress(compr, &comprLen, (const Bytef*)hello, len);

	if (err != Z_OK)
	{
		cerr << "压缩错误: " << err << '\n ';
	}

	cout << "原文长度: " << len << "压缩后长度:" << comprLen << std::endl;
	printf("原文长度: %d: 压缩后长度: %ld\n", len, comprLen);
	strcpy((char*)uncompr, "garbage ");
	uncomprLen = sizeof(uncompr) / sizeof(uncompr[0]);
	err = uncompress(uncompr, &uncomprLen, compr, comprLen);

	if (err != Z_OK)
	{
		cerr << "解压错误: " << err << '\n ';
	}

	printf("原文长度: %d: 解压后长度: %ld\n" , len,uncomprLen );

	cout << "原文长度:" << len << "解压后长度:" << uncomprLen << endl;

	if (strncmp((char*)uncompr, hello,len))
	{
		cerr << "\n解压失败!!!\n ";
	}
	else
	{
		cout << "\n解压成功:" << (char*)uncompr;
	}
	/*
	FILE *f = fopen("d:\\b1.bin", "wb");
	fwrite(compr, comprLen, 1, f);
	fclose(f);
	*/
	getchar();
	return 0;
	return 0;
}


