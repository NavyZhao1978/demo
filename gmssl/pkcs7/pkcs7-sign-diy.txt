typedef struct pkcs7_st {
    /*
     * The following is non NULL if it contains ASN1 encoding of this
     * structure
     */
    unsigned char *asn1;
    long length;
# define PKCS7_S_HEADER  0
# define PKCS7_S_BODY    1
# define PKCS7_S_TAIL    2
    int state;                  /* used during processing */
    int detached;
    ASN1_OBJECT *type;
    /* content as defined by the type */
    /*
     * all encryption/message digests are applied to the 'contents', leaving
     * out the 'type' field.
     */
    union {
        char *ptr;
        /* NID_pkcs7_data */
        ASN1_OCTET_STRING *data;
        /* NID_pkcs7_signed */
        PKCS7_SIGNED *sign;
        /* NID_pkcs7_enveloped */
        PKCS7_ENVELOPE *enveloped;
        /* NID_pkcs7_signedAndEnveloped */
        PKCS7_SIGN_ENVELOPE *signed_and_enveloped;
        /* NID_pkcs7_digest */
        PKCS7_DIGEST *digest;
        /* NID_pkcs7_encrypted */
        PKCS7_ENCRYPT *encrypted;
        /* Anything else */
        ASN1_TYPE *other;
    } d;
} PKCS7;



设置类型
	PPKCS7_set_type(p7, NID_pkcs7_signed);
		p7->type =  OBJ_nid2obj(type);;
		p7->d.sign = PKCS7_SIGNED_new()
		ASN1_INTEGER_set(p7->d.sign->version, 1)


		
		
typedef struct pkcs7_signer_info_st {
    ASN1_INTEGER *version;      /* version 1 */
    PKCS7_ISSUER_AND_SERIAL *issuer_and_serial;
    X509_ALGOR *digest_alg;
    STACK_OF(X509_ATTRIBUTE) *auth_attr; /* [ 0 ] */
    X509_ALGOR *digest_enc_alg;
    ASN1_OCTET_STRING *enc_digest;
    STACK_OF(X509_ATTRIBUTE) *unauth_attr; /* [ 1 ] */
    /* The private key to sign with */
    EVP_PKEY *pkey;
} PKCS7_SIGNER_INFO;


typedef struct pkcs7_signed_st {
    ASN1_INTEGER *version;      /* version 1 */
    STACK_OF(X509_ALGOR) *md_algs; /* md used */
    STACK_OF(X509) *cert;       /* [ 0 ] */
    STACK_OF(X509_CRL) *crl;    /* [ 1 ] */
    STACK_OF(PKCS7_SIGNER_INFO) *signer_info;
    struct pkcs7_st *contents;
} PKCS7_SIGNED;

	



设置内容
	PKCS7_content_new(p7, NID_pkcs7_data);
		PKCS7_new()
		PKCS7_set_type
			p7->d.data = M_ASN1_OCTET_STRING_new()
		PKCS7_set_content
			PKCS7_free(p7->d.sign->contents);
			p7->d.sign->contents = p7_data;
	

	
添加签名者:
	PKCS7_add_signature
		si = PKCS7_SIGNER_INFO_new()
		PKCS7_SIGNER_INFO_set
			ASN1_INTEGER_set(p7i->version, 1)
			X509_NAME_set(&p7i->issuer_and_serial->issuer,X509_get_issuer_name(x509))
			p7i->issuer_and_serial->serial = ASN1_INTEGER_dup(X509_get_serialNumber(x509))
			设置算法
			p7i->digest_alg->algorithm = OBJ_txt2obj("1.2.156.10197.1.401",0); 
			
		PKCS7_add_signer
			signer_sk = p7->d.sign->signer_info;
			md_sk = p7->d.sign->md_algs;
			设置摘要算法
			nid = OBJ_obj2nid(psi->digest_alg->algorithm);
			alg->algorithm = OBJ_nid2obj(nid);
			sk_X509_ALGOR_push(md_sk, alg)   
			获取当前签名的hash算法
			sk_PKCS7_SIGNER_INFO_push(signer_sk, psi)

添加证书:
	PKCS7_add_certificate
		sk = &(p7->d.sign->cert);
		sk_X509_push(*sk, x509)
		
		
设置签名数据:
	ASN1_STRING_set(si->enc_digest, (unsigned char *)signdata, signlen)
	if(PKCS7_is_detached(p7) && PKCS7_type_is_data(p7))
		设置原文数据
		p7->d.sign->contents->d.data;
		
		
typedef struct pkcs7_signer_info_st {
    ASN1_INTEGER *version;      /* version 1 */
    PKCS7_ISSUER_AND_SERIAL *issuer_and_serial;
    X509_ALGOR *digest_alg;
    STACK_OF(X509_ATTRIBUTE) *auth_attr; /* [ 0 ] */
    X509_ALGOR *digest_enc_alg;
    ASN1_OCTET_STRING *enc_digest;
    STACK_OF(X509_ATTRIBUTE) *unauth_attr; /* [ 1 ] */
    /* The private key to sign with */
    EVP_PKEY *pkey;
} PKCS7_SIGNER_INFO;

typedef struct pkcs7_signed_st {
    ASN1_INTEGER *version;      /* version 1 */
    STACK_OF(X509_ALGOR) *md_algs; /* md used */
    STACK_OF(X509) *cert;       /* [ 0 ] */
    STACK_OF(X509_CRL) *crl;    /* [ 1 ] */
    STACK_OF(PKCS7_SIGNER_INFO) *signer_info; //签名信息
    struct pkcs7_st *contents; //原文
} PKCS7_SIGNED;


typedef struct pkcs7_st {
    /*
     * The following is non NULL if it contains ASN1 encoding of this
     * structure
     */
    unsigned char *asn1;
    long length;
# define PKCS7_S_HEADER  0
# define PKCS7_S_BODY    1
# define PKCS7_S_TAIL    2
    int state;                  /* used during processing */
    int detached;
    ASN1_OBJECT *type;
    /* content as defined by the type */
    /*
     * all encryption/message digests are applied to the 'contents', leaving
     * out the 'type' field.
     */
    union {
        char *ptr;
        /* NID_pkcs7_data */
        ASN1_OCTET_STRING *data;
        /* NID_pkcs7_signed */
        PKCS7_SIGNED *sign;   
        /* NID_pkcs7_enveloped */
        PKCS7_ENVELOPE *enveloped;
        /* NID_pkcs7_signedAndEnveloped */
        PKCS7_SIGN_ENVELOPE *signed_and_enveloped;
        /* NID_pkcs7_digest */
        PKCS7_DIGEST *digest;
        /* NID_pkcs7_encrypted */
        PKCS7_ENCRYPT *encrypted;
        /* Anything else */
        ASN1_TYPE *other;
    } d;
} PKCS7;










//---------------------------------------------------------------------------//
获取原文内容
	PKCS7_get_octet_string(p7->d.sign->contents);


从签名者获取 hash数据
	PKCS7_digest_from_attributes(sk_PKCS7_SIGNER_INFO_value(p7->d.sign->signer_info,0)->auth_attr)


获取证书
	sk_X509_value(p7->d.sign->cert, i);
	
获取签名数据	
	os=sk_PKCS7_SIGNER_INFO_value(p7->d.sign->signer_info,0)->enc_digest;


	
		
		
		
		
		
		
		
		
		
		
		
		

